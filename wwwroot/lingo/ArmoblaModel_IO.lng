MODEL: 

SETS:

MUEBLE /1,2/: CostoInsta;

TIPO /1,2/:;

MUEBLE_TIPO(MUEBLE, TIPO): Utilidad, CostoProd, Demanda, CantMaxMuebleTipo, X;

MATERIAL /1,2/: Cant_Mat;

MUEBLE_MAT(MUEBLE, MATERIAL): Uso_Mat;

ALMACEN /1..3/: CostoAlmacen, YA;

TALLER /1..3/: CostoTaller, YT;

TRANSPORTE /1,2/: Costoenv, YTR;

ZONA /1,2/: CostoDeliv;

ENDSETS 



DATA:

CostoInsta = @OLE('PowerQuery_LingoIO.xlsx', B2:B3);
Utilidad = @OLE('PowerQuery_LingoIO.xlsx', C10:C13);
CostoProd = @OLE('PowerQuery_LingoIO.xlsx', D10:D13);
Demanda = @OLE('PowerQuery_LingoIO.xlsx', E10:E13);
CantMaxMuebleTipo = @OLE('PowerQuery_LingoIO.xlsx', F10:F13);
Cant_Mat = @OLE('PowerQuery_LingoIO.xlsx', B16:B17);
Uso_Mat = @OLE('PowerQuery_LingoIO.xlsx', C20:C23);
CostoAlmacen = @OLE('PowerQuery_LingoIO.xlsx', B26:B28);
CostoTaller = @OLE('PowerQuery_LingoIO.xlsx', B31:B33);
Costoenv = @OLE('PowerQuery_LingoIO.xlsx', B36:B37);
CostoDeliv = @OLE('PowerQuery_LingoIO.xlsx', B40:B41);

ENDDATA



!Función Objetivo;
MAX = @SUM(MUEBLE_TIPO(M,T): X(M,T)* (Utilidad(M,T) - CostoProd(M,T)))
	+ 0.5* @SUM(MUEBLE_TIPO(M,T): X(M,T)*CostoInsta(M))
	+ 0.25* @SUM(MUEBLE_TIPO(M,T): (CostoDeliv(1)+CostoDeliv(2))*X(M,T))
	- @SUM(ALMACEN(A): YA(A)*CostoAlmacen(A))
	- @SUM(TALLER(TA): YT(TA)*CostoTaller(TA))
	- @SUM(TRANSPORTE(TR): YTR(TR)*Costoenv(TR));



!RESTRICCIONES;

!Restricción de Demanda Mínima;
@FOR(MUEBLE_TIPO(M,T):
	X(M,T) >= Demanda(M,T));

!Restricción de Uso de Materiales;
@FOR(MUEBLE_MAT(M,MA): 
	@SUM(MUEBLE_TIPO(M,T): X(M,T)*Uso_Mat(M,MA)) <= Cant_Mat(MA));

!Restricción de Cantidad Máxima de Fabricación;
@FOR(MUEBLE_TIPO(M,T):
	X(M,T) <= CantMaxMuebleTipo(M,T));

!Restricción de Máximo Presupuesto a usarse;
@SUM(MUEBLE_TIPO(M,T): X(M,T)*CostoProd(M,T))
+ @SUM(ALMACEN(A): YA(A)*CostoAlmacen(A))
+ @SUM(TALLER(TA): YT(TA)*CostoTaller(TA))
+ @SUM(TRANSPORTE(TR): YTR(TR)*Costoenv(TR))
<= 20000;

!Restricción de Almacenes:
Únicamente puede usarse uno;
@SUM(ALMACEN(A): YA(A)) = 1;

!Restricción de Talleres:
Pueden usarse como máximo 2;
@SUM(TALLER(TA): YT(TA)) <= 2;
@SUM(TALLER(TA): YT(TA)) >= 1;

!Restricción de Transporte:
Únicamente puede usarse un servicio;
@SUM(TRANSPORTE(TR): YTR(TR)) = 1;



!VARIABLES BINARIAS;

!Elección de Almacen;
@FOR(ALMACEN(A):@BIN(YA(A)));

!Elección de Taller;
@FOR(TALLER(TA):@BIN(YT(TA)));

!Elección de Transporte;
@FOR(TRANSPORTE(TR):@BIN(YTR(TR)));


	
!VARIABLE ENTERA:
Asegurarse que se produzcan unidades enteras de los muebles;

@FOR(MUEBLE_TIPO(M,T):@GIN(X(M,T)));

END

!Enviar resultados de Binarias y Solución a un txt;

@TEXT("resultado.txt");
@FOR(ALMACEN(A): @IF(YA(A)=1: @WRITE("YA(", A, ") = 1", @NEWLINE)));
@FOR(TALLER(T): @IF(YT(T)=1: @WRITE("YT(", T, ") = 1", @NEWLINE)));
@FOR(TRANSPORTE(TR): @IF(YTR(TR)=1: @WRITE("YTR(", TR, ") = 1", @NEWLINE)));
@FOR(MUEBLE_TIPO(M,T): @IF(X(M,T)>0: @WRITE("X(", M, ",", T, ") = ", X(M,T), @NEWLINE)));
@TEXT();








